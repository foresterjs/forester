{"version":3,"sources":["../lib/validator.js"],"names":[],"mappings":"AAAA;;;;;;;;AAEA;;;;;;;;;;AACA,IAAM,iBAAiB,QAAQ,mBAAR,CAAvB;;IAEqB,S;AAEnB,qBAAY,MAAZ,EAAoB;AAAA;;AAClB,SAAK,MAAL,GAAc,MAAd;AACD;;;;;4EAEc,I;YAET,gB,EAIA,M;;;;;AAJA,gC,GAAmB,kBAAQ,QAAR,CAAiB,IAAjB,EAAuB,KAAK,MAA5B,C;;qBAEnB,iBAAiB,K;;;;;iDAAc,I;;;AAE/B,sB,GAAS,E;;AACb,iCAAiB,MAAjB,CAAwB,OAAxB,CAAgC,UAAC,GAAD,EAAS;AACvC,yBAAO,IAAI,QAAX,IAAuB,OAAO,IAAI,QAAX,KAAwB,EAA/C;AACA,yBAAO,IAAI,QAAX,EAAqB,IAArB,CAA0B,IAAI,OAA9B;AACD,iBAHD;;sBAKM,IAAI,cAAJ,CAAmB,MAAnB,C;;;;;;;;;;;;;;;;;;;;;kBAlBW,S","file":"validator.js","sourcesContent":["'use strict';\n\nimport mschema from 'mschema';\nconst ValidationFail = require('./validation-fail');\n\nexport default class Validator {\n\n  constructor(schema) {\n    this.schema = schema;\n  }\n\n  async validate(data) {\n\n    let validationResult = mschema.validate(data, this.schema);\n\n    if (validationResult.valid) return true;\n\n    let errors = {};\n    validationResult.errors.forEach((err) => {\n      errors[err.property] = errors[err.property] || [];\n      errors[err.property].push(err.message);\n    });\n\n    throw new ValidationFail(errors);\n  }\n\n}\n"]}