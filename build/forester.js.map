{"version":3,"sources":["../lib/forester.js"],"names":[],"mappings":"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","file":"forester.js","sourcesContent":["'use strict';\n\nvar Collection = require('./collection');\nvar Rest = require('./rest');\nvar Defender = require('./defender');\nvar DataSourceMongo = require('./data-sources/mongo');\nvar DataSourceTingoDB = require('./data-sources/tingo');\nvar koa = require('koa');\nconst router = require('koa-simple-router');\nconst convert = require('koa-convert');\nvar serve = require('koa-static');\nvar mount = require('koa-mount');\nvar bodyParser = require('koa-bodyparser');\nconst qs = require('koa-qs');\nconst assert = require(\"assert\");\nconst compose = require(\"koa-compose\");\nconst koaSend = require(\"koa-send\");\n\nclass Forester {\n\n  constructor() {\n    this.collections = {};\n    this.dataSources = {};\n    this.mappings = [];\n    this.dataSourceAdapters = {\n      'mongo' : DataSourceMongo,\n      'mongodb' : DataSourceMongo,\n      'tingo': DataSourceTingoDB,\n      'tingodb': DataSourceTingoDB\n    };\n\n    this.koa = new koa();\n    this.koa.use(bodyParser());\n    qs(this.koa);\n    this.rest = new Rest(this);\n  }\n\n  registerDataSource({name, adapter, options}) {\n    var driver = this.dataSourceAdapters[adapter];\n    if(!driver) throw new Error(adapter + ' is not supported');\n\n    return this.dataSources[name] = new driver(options);\n  }\n\n  registerDataSources(datasources) {\n    datasources.forEach(this.registerDataSource.bind(this));\n  }\n\n  registerCollection(collectionSchema) {\n    return this.collections[collectionSchema.name] = new Collection({\n      collectionSchema,\n      collections: this.collections\n    });\n  }\n\n  registerCollections(collections) {\n    collections.forEach(this.registerCollection.bind(this));\n  }\n\n  registerMapping(mapping) {\n    this.mappings.push(mapping);\n    return mapping;\n  }\n\n  registerMappings(mappings) {\n    mappings.forEach(this.registerMapping.bind(this));\n  }\n\n  registerStaticRoute({route = \"/\", path, failback}) {\n\n    assert(path, \"Path not defined\");\n\n    var failbackMiddleware = convert(function *(next) {\n      if(this.body || this.path.substring(1, 4) === \"api\") {\n        yield next;\n        return;\n      }\n\n      yield koaSend(this, failback, {root: path});\n\n    });\n\n    var serveMiddleware = convert(serve(path));\n\n    if (failback) {\n      this.koa.use(mount(route, compose([serveMiddleware, failbackMiddleware])));\n    } else {\n      this.koa.use(mount(route, serveMiddleware));\n    }\n\n  }\n\n  registerEndpoint(options) {\n    this.rest.registerEndpoint(options);\n  }\n\n  registerCheckMethod(name, middleware){\n\n    Defender.registerCheckMethod(name, middleware);\n\n  }\n\n  registerDataSourceAdapter(name, driver){\n    this.dataSourceAdapters[name] = driver;\n  }\n\n  initCollections() {\n    this.mappings.forEach(({collection, datasource}) => {\n      var collectionObj = this.collections[collection];\n      var dataSourceObj = this.dataSources[datasource];\n\n      if (!collectionObj) throw new Error('Mapping err: Collection ' + collection + ' not defined or registered');\n      if (!dataSourceObj) throw new Error('Mapping err: Datasource ' + datasource + ' not defined or registered');\n\n      collectionObj.dataSource = dataSourceObj;\n    });\n\n    for (var collectionName in this.collections) {\n      var collectionObj = this.collections[collectionName];\n      if (!collectionObj.dataSource) {\n        throw new Error('Collection err: Collection ' + collectionName + ' is not mapped to any datasource');\n      }\n    }\n  }\n\n  async boot() {\n\n    this.initCollections();\n    this.rest.boot();\n\n    console.log(\"Forester is ready!\");\n  }\n\n  use(plugin) {\n    plugin(this);\n  }\n\n  listen({port}) {\n    return new Promise((resolve, reject) => {\n      this.server = this.koa.listen(port, function (err) {\n        if (err) {\n          reject(err);\n          return;\n        }\n        console.log(\"Listening \" + port);\n        resolve();\n      });\n    });\n  }\n\n  close() {\n    return new Promise((resolve, reject) => {\n      this.server.close(function (err) {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve();\n      });\n    });\n  }\n}\n\nmodule.exports = Forester;\n"]}