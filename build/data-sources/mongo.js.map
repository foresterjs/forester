{"version":3,"sources":["../../lib/data-sources/mongo.js"],"names":[],"mappings":"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","file":"mongo.js","sourcesContent":["'use strict';\n\nvar pmongo = require('promised-mongo');\n\nclass DataSourceMongo {\n\n  constructor({connectionUri}) {\n\n    this.db = pmongo(connectionUri);\n\n  }\n\n  async updateSchema(collectionName) {\n    console.log('here', collectionName);\n    await this.db.createCollection(collectionName);\n  }\n\n  async findAll(collectionName, { page, perPage, where, orderBy, fields} = {}) {\n\n    //TODO implement fields\n\n    var cursor;\n\n    if (typeof where === 'undefined') {\n      cursor = this.db.collection(collectionName).find();\n    } else {\n      cursor = this.db.collection(collectionName).find(DataSourceMongo.mongoWhere(where));\n    }\n\n    if (typeof orderBy !== 'undefined') {\n      cursor.sort(DataSourceMongo.mongoOrderBy(orderBy));\n    }\n\n    if (typeof page !== 'undefined' && typeof perPage !== 'undefined') {\n      var skip = (perPage * (page - 1))\n\n      cursor.limit(perPage);\n      cursor.skip(skip);\n    }\n\n    return DataSourceMongo.unwrapId(await cursor.toArray());\n  }\n\n  async pick(collectionName, ids) {\n\n    if(Array.isArray(ids)){\n\n      ids = ids.map(function(id){\n        return pmongo.ObjectId(id)\n      });\n\n      var items = await this.db.collection(collectionName).find({_id: {$in: ids}});\n      return DataSourceMongo.unwrapId(items);\n\n    }else{\n\n      var id = ids;\n      try {\n        var item = await this.db.collection(collectionName).findOne({_id: new pmongo.ObjectId(id)});\n        item = (item === null) ? false : item;\n      } catch (e) {\n        console.error(e);\n        return false;\n      }\n\n      return DataSourceMongo.unwrapId(item);\n\n    }\n  }\n\n  async create(collectionName, data) {\n    var item = await this.db.collection(collectionName).insert(data);\n    return DataSourceMongo.unwrapId(item);\n  }\n\n  async update(collectionName, id, data) {\n    try {\n      var item = await this.db.collection(collectionName).findAndModify({\n        'query': {'_id': new pmongo.ObjectId(id)},\n        'update': data,\n        'new': true\n      });\n\n      item = (item.lastErrorObject.n === 0) ? false : item.value;\n\n    } catch (e) {\n      console.error(e);\n      return false;\n    }\n\n    return DataSourceMongo.unwrapId(item);\n  }\n\n  async destroy(collectionName, ids) {\n\n    if (Array.isArray(ids)) {\n\n      ids = ids.map(function (id) {\n        return pmongo.ObjectId(id)\n      });\n\n      await this.db.collection(collectionName).remove({_id: {$in: ids}});\n      return true;\n\n    } else {\n\n      try {\n\n        var id = ids;\n        var result = await this.db.collection(collectionName).remove({'_id': new pmongo.ObjectId(id)});\n\n        return result.n === 1;\n\n      } catch (e) {\n        console.error(e);\n        return false;\n      }\n\n    }\n  }\n\n\n  async exists(collectionName, id) {\n    try {\n      var item = await this.db.collection(collectionName).findOne({'_id': new pmongo.ObjectId(id)});\n      return (item !== null);\n    }catch (e){\n      console.error(e);\n      return false;\n    }\n  }\n\n  async count(collectionName, where) {\n    var count = await this.db.collection(collectionName).count(where);\n    return count;\n  }\n\n\n  static mongoOrderBy(orderBy) {\n\n    var orderByMap = {\n      ASC: 1,\n      DESC: -1\n    };\n\n    var result = {};\n\n    for (var field in orderBy) {\n      var value = orderByMap[orderBy[field]];\n      if (!value) throw new Error('orderBy not recognized');\n\n      result[field] = value;\n\n    }\n\n    return result;\n  }\n\n  static mongoWhere(where) {\n    return where;\n  }\n\n  static unwrapId(docs) {\n    if (Array.isArray(docs)) {\n      return docs.map(DataSourceMongo.unwrapId);\n    }\n\n    var doc = docs;\n    doc.id = doc._id.toString();\n    delete doc._id;\n    return doc;\n  }\n\n}\n\nmodule.exports = DataSourceMongo;\n"]}